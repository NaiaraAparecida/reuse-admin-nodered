[
    {
        "id": "a1abba21",
        "type": "tab",
        "label": "ReUse Backoffice",
        "disabled": false,
        "info": "Painel administrativo para configurar o ReUse via /api/config."
    },
    {
        "id": "793f10c4",
        "type": "tab",
        "label": "ReUse API",
        "disabled": false,
        "info": "Endpoints REST e WebSocket para ReUse."
    },
    {
        "id": "176fe326",
        "type": "ui_tab",
        "z": "a1abba21",
        "name": "ReUse – Admin",
        "icon": "settings",
        "order": 1,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "183d7462",
        "type": "ui_group",
        "z": "a1abba21",
        "name": "Feature Flags",
        "tab": "176fe326",
        "order": 1,
        "disp": true,
        "width": "12",
        "collapse": false
    },
    {
        "id": "ee3e91c0",
        "type": "ui_group",
        "z": "a1abba21",
        "name": "Parâmetros",
        "tab": "176fe326",
        "order": 2,
        "disp": true,
        "width": "12",
        "collapse": false
    },
    {
        "id": "0dbf9f9b",
        "type": "ui_group",
        "z": "a1abba21",
        "name": "Ações",
        "tab": "176fe326",
        "order": 3,
        "disp": true,
        "width": "12",
        "collapse": false
    },
    {
        "id": "d4b33199",
        "type": "ui_group",
        "z": "a1abba21",
        "name": "Status",
        "tab": "176fe326",
        "order": 4,
        "disp": true,
        "width": "12",
        "collapse": false
    },
    {
        "id": "8f435366ba1f31cc",
        "type": "ui_base",
        "theme": {
            "name": "theme-light",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
            },
            "themeState": {
                "base-color": {
                    "default": "#0094CE",
                    "value": "#0094CE",
                    "edited": false
                },
                "page-titlebar-backgroundColor": {
                    "value": "#0094CE",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#fafafa",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#1bbfff",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#111111",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#0094ce",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey",
                "palette": "light"
            }
        },
        "site": {
            "name": "Node-RED Dashboard",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "lockMenu": "false",
            "allowTempTheme": "true",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "8adb3338",
        "type": "inject",
        "z": "a1abba21",
        "name": "Carregar config ao iniciar",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0.5",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 160,
        "y": 100,
        "wires": [
            [
                "301b6cfe"
            ]
        ]
    },
    {
        "id": "3d222149",
        "type": "ui_button",
        "z": "a1abba21",
        "name": "",
        "group": "0dbf9f9b",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Carregar",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "",
        "x": 150,
        "y": 140,
        "wires": [
            [
                "301b6cfe"
            ]
        ]
    },
    {
        "id": "301b6cfe",
        "type": "http request",
        "z": "a1abba21",
        "name": "GET /api/config",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://localhost:1880/api/config",
        "persist": false,
        "authType": "",
        "x": 380,
        "y": 120,
        "wires": [
            [
                "de7be29c"
            ]
        ]
    },
    {
        "id": "de7be29c",
        "type": "function",
        "z": "a1abba21",
        "name": "Popular UI com config",
        "func": "\n// Espera msg.payload = config JSON\nconst cfg = msg.payload || {};\nnode.status({fill:'green',shape:'dot',text:'Config carregada'});\n\n// Dispara mensagens específicas para cada widget via topics\nfunction out(topic, value){ return {topic, payload:value}; }\n\nreturn [\n  out('trocas', !!cfg.enableTrades),\n  out('push', !!cfg.enablePushNotifications),\n  out('manutencao', !!cfg.maintenanceMode),\n  out('maximgs', Number(cfg.maxImagesPerItem || 5)),\n  out('banner', String(cfg.bannerText || '')),\n  { payload: `Última atualização: ${new Date().toLocaleString()}` }\n];\n",
        "outputs": 6,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 120,
        "wires": [
            [
                "60dff059"
            ],
            [
                "60dff059"
            ],
            [
                "60dff059"
            ],
            [
                "60dff059"
            ],
            [
                "60dff059"
            ],
            [
                "7fc73732"
            ]
        ]
    },
    {
        "id": "60dff059",
        "type": "switch",
        "z": "a1abba21",
        "name": "Roteia por topic",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "trocas",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "push",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "manutencao",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "maximgs",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "banner",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 6,
        "x": 850,
        "y": 120,
        "wires": [
            [
                "15b89cf0"
            ],
            [
                "a89ac878"
            ],
            [
                "3a878587"
            ],
            [
                "1d96d4e0"
            ],
            [
                "54de1da5"
            ],
            [
                "7fc73732"
            ]
        ]
    },
    {
        "id": "15b89cf0",
        "type": "ui_switch",
        "z": "a1abba21",
        "name": "",
        "label": "Trocas",
        "tooltip": "Liga/desliga o sistema de trocas",
        "group": "183d7462",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": true,
        "decouple": "false",
        "topic": "trocas",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": true,
        "x": 1020,
        "y": 60,
        "wires": [
            [
                "37d53c5a"
            ]
        ]
    },
    {
        "id": "a89ac878",
        "type": "ui_switch",
        "z": "a1abba21",
        "name": "",
        "label": "Push",
        "tooltip": "Ativa push/emails de alertas/confirm.",
        "group": "183d7462",
        "order": 2,
        "width": 0,
        "height": 0,
        "passthru": true,
        "decouple": "false",
        "topic": "push",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": true,
        "x": 1000,
        "y": 100,
        "wires": [
            [
                "37d53c5a"
            ]
        ]
    },
    {
        "id": "3a878587",
        "type": "ui_switch",
        "z": "a1abba21",
        "name": "",
        "label": "Manutenção",
        "tooltip": "Exibe página de manutenção",
        "group": "183d7462",
        "order": 3,
        "width": 0,
        "height": 0,
        "passthru": true,
        "decouple": "false",
        "topic": "manutencao",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": true,
        "x": 1020,
        "y": 140,
        "wires": [
            [
                "37d53c5a"
            ]
        ]
    },
    {
        "id": "1d96d4e0",
        "type": "ui_numeric",
        "z": "a1abba21",
        "name": "",
        "label": "Máx imagens",
        "tooltip": "Limite por item (1-10)",
        "group": "ee3e91c0",
        "order": 1,
        "width": 0,
        "height": 0,
        "wrap": false,
        "topic": "maximgs",
        "format": "{{value}}",
        "min": 1,
        "max": 10,
        "step": 1,
        "x": 1010,
        "y": 200,
        "wires": [
            [
                "37d53c5a"
            ]
        ]
    },
    {
        "id": "54de1da5",
        "type": "ui_text_input",
        "z": "a1abba21",
        "name": "",
        "label": "Banner",
        "tooltip": "Mensagem exibida no app/site",
        "group": "ee3e91c0",
        "order": 2,
        "width": 0,
        "height": 0,
        "passthru": true,
        "topic": "banner",
        "x": 1000,
        "y": 240,
        "wires": [
            [
                "37d53c5a"
            ]
        ]
    },
    {
        "id": "5c356b8c",
        "type": "ui_button",
        "z": "a1abba21",
        "name": "",
        "group": "0dbf9f9b",
        "order": 2,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Salvar",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "save",
        "payload": "",
        "payloadType": "str",
        "topic": "salvar",
        "x": 160,
        "y": 220,
        "wires": [
            [
                "0bd398c1"
            ]
        ]
    },
    {
        "id": "6a32775b",
        "type": "ui_button",
        "z": "a1abba21",
        "name": "",
        "group": "0dbf9f9b",
        "order": 3,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Forçar recarregar app",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "refresh",
        "payload": "",
        "payloadType": "str",
        "topic": "invalidate",
        "x": 210,
        "y": 260,
        "wires": [
            [
                "c0d4ab64"
            ]
        ]
    },
    {
        "id": "7fc73732",
        "type": "ui_text",
        "z": "a1abba21",
        "group": "d4b33199",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Status",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 1000,
        "y": 300,
        "wires": []
    },
    {
        "id": "37d53c5a",
        "type": "function",
        "z": "a1abba21",
        "name": "Atualizar estado local",
        "func": "\n// Guarda no flow context o estado atual dos widgets\nconst st = flow.get('cfg') || {};\n\nswitch(msg.topic){\n  case 'trocas': st.enableTrades = !!msg.payload; break;\n  case 'push': st.enablePushNotifications = !!msg.payload; break;\n  case 'manutencao': st.maintenanceMode = !!msg.payload; break;\n  case 'maximgs': st.maxImagesPerItem = Number(msg.payload || 5); break;\n  case 'banner': st.bannerText = String(msg.payload || ''); break;\n}\nflow.set('cfg', st);\nreturn null; // silencioso\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1230,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "0bd398c1",
        "type": "function",
        "z": "a1abba21",
        "name": "Montar payload & auditar",
        "func": "\nconst cfg = flow.get('cfg') || {};\nmsg.headers = msg.headers || {};\nmsg.headers['Content-Type'] = 'application/json';\n// Se tiver var de ambiente com token:\nconst token = env.get('REUSE_ADMIN_TOKEN');\nif (token) msg.headers['Authorization'] = 'Bearer ' + token;\nmsg.payload = cfg;\nnode.status({fill:'blue',shape:'dot',text:'Salvando...'});\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 220,
        "wires": [
            [
                "d179bd1d"
            ]
        ]
    },
    {
        "id": "d179bd1d",
        "type": "http request",
        "z": "a1abba21",
        "name": "PUT /api/config",
        "method": "PUT",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://localhost:1880/api/config",
        "persist": false,
        "authType": "",
        "x": 660,
        "y": 220,
        "wires": [
            [
                "af37cbe4",
                "7fc73732"
            ]
        ]
    },
    {
        "id": "af37cbe4",
        "type": "ui_toast",
        "z": "a1abba21",
        "position": "top right",
        "displayTime": "3",
        "highlight": "",
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "topic": "",
        "name": "Toast",
        "x": 990,
        "y": 360,
        "wires": []
    },
    {
        "id": "c0d4ab64",
        "type": "http request",
        "z": "a1abba21",
        "name": "(opcional) POST /admin/config/invalidate",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://localhost:1880/admin/config/invalidate",
        "persist": false,
        "authType": "",
        "x": 570,
        "y": 260,
        "wires": [
            [
                "af37cbe4"
            ]
        ]
    },
    {
        "id": "a5911866",
        "type": "http in",
        "z": "793f10c4",
        "name": "get /api/config",
        "url": "/api/config",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 120,
        "y": 100,
        "wires": [
            [
                "5e4ec226"
            ]
        ]
    },
    {
        "id": "5e4ec226",
        "type": "function",
        "z": "793f10c4",
        "name": "Read config file",
        "func": "const fs = require('fs');\nconst path = 'data/reuse_config.json';\ntry {\n  const raw = fs.readFileSync(path, 'utf-8');\n  msg.payload = JSON.parse(raw);\n  msg.statusCode = 200;\n} catch (e) {\n  node.error(e);\n  msg.statusCode = 500;\n  msg.payload = { error: 'CONFIG_READ_ERROR' };\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 100,
        "wires": [
            [
                "49767e10"
            ]
        ]
    },
    {
        "id": "49767e10",
        "type": "http response",
        "z": "793f10c4",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 560,
        "y": 100,
        "wires": []
    },
    {
        "id": "b946d6de",
        "type": "http in",
        "z": "793f10c4",
        "name": "put /api/config",
        "url": "/api/config",
        "method": "put",
        "upload": false,
        "swaggerDoc": "",
        "x": 120,
        "y": 160,
        "wires": [
            [
                "8a85c770"
            ]
        ]
    },
    {
        "id": "8a85c770",
        "type": "function",
        "z": "793f10c4",
        "name": "Auth Bearer",
        "func": "const auth = msg.req.headers.authorization || '';\nconst token = auth.startsWith('Bearer ') ? auth.slice(7) : '';\nconst ADMIN_TOKEN = process.env.REUSE_ADMIN_TOKEN || 'changeme';\nif (token !== ADMIN_TOKEN) {\n  msg.statusCode = 401;\n  msg.payload = { error: 'UNAUTHORIZED' };\n  return [null, msg];\n}\nreturn [msg, null];",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 160,
        "wires": [
            [
                "809c48d4"
            ],
            [
                "9c98ed3a"
            ]
        ]
    },
    {
        "id": "809c48d4",
        "type": "function",
        "z": "793f10c4",
        "name": "Merge & validate",
        "func": "const fs = require('fs');\nconst path = 'data/reuse_config.json';\nconst body = msg.payload || {};\nconst allowed = ['enableTrades','enablePushNotifications','maintenanceMode','maxImagesPerItem','bannerText','weeklyChallenges','monthlyChallenges'];\n\nfunction validate(cfg) {\n  if (typeof cfg.maxImagesPerItem !== 'number' || cfg.maxImagesPerItem < 1 || cfg.maxImagesPerItem > 10) {\n    throw new Error('maxImagesPerItem must be 1..10');\n  }\n  return cfg;\n}\n\ntry {\n  const current = JSON.parse(fs.readFileSync(path,'utf-8'));\n  const next = { ...current };\n  for (const k of allowed) if (body[k] !== undefined) next[k] = body[k];\n  validate(next);\n  fs.writeFileSync(path, JSON.stringify(next, null, 2));\n  msg.configUpdated = next;\n  return msg;\n} catch (e) {\n  msg.statusCode = 400;\n  msg.payload = { error: e.message };\n  return msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 160,
        "wires": [
            [
                "2809ca06"
            ]
        ]
    },
    {
        "id": "2809ca06",
        "type": "function",
        "z": "793f10c4",
        "name": "Audit & prepare WS",
        "func": "const fs = require('fs');\nconst auditPath = 'data/reuse_audit.jsonl';\nconst entry = {\n  at: new Date().toISOString(),\n  actor: (msg.req && msg.req.headers && msg.req.headers['x-admin-user']) || 'bearer',\n  route: msg.req?.method + ' ' + msg.req?.originalUrl,\n  body: msg.payload,\n  result: msg.configUpdated\n};\nfs.appendFileSync(auditPath, JSON.stringify(entry) + '\\n');\nmsg.payload = msg.configUpdated;\nmsg.statusCode = 200;\nmsg.broadcast = { type:'config-updated', ts: Date.now() };\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 160,
        "wires": [
            [
                "05ae5931",
                "9c98ed3a"
            ]
        ]
    },
    {
        "id": "05ae5931",
        "type": "websocket out",
        "z": "793f10c4",
        "name": "WS /ws/config",
        "server": "",
        "client": "",
        "x": 900,
        "y": 160,
        "wires": []
    },
    {
        "id": "9c98ed3a",
        "type": "http response",
        "z": "793f10c4",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1120,
        "y": 160,
        "wires": []
    },
    {
        "id": "4f823fec",
        "type": "http in",
        "z": "793f10c4",
        "name": "get /api/items",
        "url": "/api/items",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 120,
        "y": 260,
        "wires": [
            [
                "b5a1e103"
            ]
        ]
    },
    {
        "id": "b5a1e103",
        "type": "function",
        "z": "793f10c4",
        "name": "Get items",
        "func": "const fs = require('fs');\nconst path = 'data/reuse_items.json';\ntry {\n  const arr = JSON.parse(fs.readFileSync(path,'utf-8'));\n  msg.payload = arr.filter(it => !it.archived);\n  msg.statusCode = 200;\n} catch (e) {\n  msg.statusCode = 500;\n  msg.payload = { error: 'ITEMS_READ_ERROR' };\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 260,
        "wires": [
            [
                "f2c634a8"
            ]
        ]
    },
    {
        "id": "f2c634a8",
        "type": "http response",
        "z": "793f10c4",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 560,
        "y": 260,
        "wires": []
    },
    {
        "id": "fcb904e1",
        "type": "http in",
        "z": "793f10c4",
        "name": "post /api/items",
        "url": "/api/items",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 120,
        "y": 320,
        "wires": [
            [
                "70c9f6bc"
            ]
        ]
    },
    {
        "id": "70c9f6bc",
        "type": "function",
        "z": "793f10c4",
        "name": "Post item",
        "func": "const fs = require('fs');\nconst path = 'data/reuse_items.json';\nconst id = () => require('crypto').randomUUID();\nconst b = msg.payload || {};\nconst errors = [];\nif (!b.name || b.name.length < 2) errors.push('name');\nif (!b.description || b.description.length < 5) errors.push('description');\nif (!Array.isArray(b.images) || b.images.length < 1) errors.push('images[]');\nif (!['novo','usado','reparo'].includes(b.condition)) errors.push('condition');\nif (!['troca','doacao'].includes(b.offerType)) errors.push('offerType');\nif (errors.length) {\n  msg.statusCode = 400;\n  msg.payload = { error: 'VALIDATION_ERROR', fields: errors };\n  return msg;\n}\ntry {\n  const arr = JSON.parse(fs.readFileSync(path,'utf-8'));\n  const now = new Date().toISOString();\n  const newItem = {\n    id: id(),\n    name: b.name, description: b.description,\n    images: b.images, condition: b.condition, offerType: b.offerType,\n    ownerId: b.ownerId || 'anon', city: b.city || null,\n    archived: false, reported: false, createdAt: now\n  };\n  arr.push(newItem);\n  fs.writeFileSync(path, JSON.stringify(arr, null, 2));\n  // audit\n  fs.appendFileSync('data/reuse_audit.jsonl', JSON.stringify({at: now, route:'POST /api/items', itemId:newItem.id}) + '\\n');\n  msg.statusCode = 201;\n  msg.payload = newItem;\n} catch (e) {\n  msg.statusCode = 500;\n  msg.payload = { error: 'ITEMS_WRITE_ERROR' };\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 320,
        "wires": [
            [
                "6a397d7f"
            ]
        ]
    },
    {
        "id": "6a397d7f",
        "type": "http response",
        "z": "793f10c4",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 560,
        "y": 320,
        "wires": []
    },
    {
        "id": "16cbae80",
        "type": "http in",
        "z": "793f10c4",
        "name": "get /api/trades",
        "url": "/api/trades",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 120,
        "y": 420,
        "wires": [
            [
                "0e28ff9a"
            ]
        ]
    },
    {
        "id": "0e28ff9a",
        "type": "function",
        "z": "793f10c4",
        "name": "Get trades",
        "func": "const fs = require('fs');\nconst path = 'data/reuse_trades.json';\ntry {\n  const arr = JSON.parse(fs.readFileSync(path,'utf-8'));\n  msg.payload = arr;\n  msg.statusCode = 200;\n} catch (e) {\n  msg.statusCode = 500;\n  msg.payload = { error: 'TRADES_READ_ERROR' };\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 420,
        "wires": [
            [
                "b0ea3843"
            ]
        ]
    },
    {
        "id": "b0ea3843",
        "type": "http response",
        "z": "793f10c4",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 560,
        "y": 420,
        "wires": []
    },
    {
        "id": "b18bf96f",
        "type": "http in",
        "z": "793f10c4",
        "name": "post /api/trades",
        "url": "/api/trades",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 120,
        "y": 480,
        "wires": [
            [
                "18794252"
            ]
        ]
    },
    {
        "id": "18794252",
        "type": "function",
        "z": "793f10c4",
        "name": "Post trade",
        "func": "const fs = require('fs');\nconst path = 'data/reuse_trades.json';\nconst id = () => require('crypto').randomUUID();\nconst b = msg.payload || {};\nconst errors = [];\nif (!b.itemId) errors.push('itemId');\nif (!b.requesterId) errors.push('requesterId');\nif (errors.length) {\n  msg.statusCode = 400;\n  msg.payload = { error: 'VALIDATION_ERROR', fields: errors };\n  return msg;\n}\ntry {\n  const arr = JSON.parse(fs.readFileSync(path,'utf-8'));\n  const now = new Date().toISOString();\n  const t = { id: id(), itemId: b.itemId, requesterId: b.requesterId, status: 'pendente', createdAt: now, updatedAt: now };\n  arr.push(t);\n  fs.writeFileSync(path, JSON.stringify(arr, null, 2));\n  fs.appendFileSync('data/reuse_audit.jsonl', JSON.stringify({at: now, route:'POST /api/trades', tradeId:t.id}) + '\\n');\n  msg.statusCode = 201;\n  msg.payload = t;\n} catch (e) {\n  msg.statusCode = 500;\n  msg.payload = { error: 'TRADES_WRITE_ERROR' };\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 480,
        "wires": [
            [
                "7e1a51d5"
            ]
        ]
    },
    {
        "id": "7e1a51d5",
        "type": "http response",
        "z": "793f10c4",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 560,
        "y": 480,
        "wires": []
    },
    {
        "id": "18329c0f",
        "type": "http in",
        "z": "793f10c4",
        "name": "patch /api/trades/:id",
        "url": "/api/trades/:id",
        "method": "patch",
        "upload": false,
        "swaggerDoc": "",
        "x": 120,
        "y": 540,
        "wires": [
            [
                "db164c4d"
            ]
        ]
    },
    {
        "id": "db164c4d",
        "type": "function",
        "z": "793f10c4",
        "name": "Patch trade",
        "func": "const fs = require('fs');\nconst url = msg.req.params;\nconst id = url.id;\nconst path = 'data/reuse_trades.json';\nconst b = msg.payload || {};\nconst allowed = ['pendente','aceita','recusada','finalizada'];\nif (!allowed.includes(b.status)) {\n  msg.statusCode = 400;\n  msg.payload = { error: 'INVALID_STATUS' };\n  return msg;\n}\ntry {\n  const arr = JSON.parse(fs.readFileSync(path,'utf-8'));\n  const idx = arr.findIndex(t => t.id === id);\n  if (idx === -1) {\n    msg.statusCode = 404;\n    msg.payload = { error: 'NOT_FOUND' };\n    return msg;\n  }\n  arr[idx].status = b.status;\n  arr[idx].updatedAt = new Date().toISOString();\n  fs.writeFileSync(path, JSON.stringify(arr, null, 2));\n  fs.appendFileSync('data/reuse_audit.jsonl', JSON.stringify({at: new Date().toISOString(), route:'PATCH /api/trades/'+id, status:b.status}) + '\\n');\n  msg.statusCode = 200;\n  msg.payload = arr[idx];\n} catch (e) {\n  msg.statusCode = 500;\n  msg.payload = { error: 'TRADES_WRITE_ERROR' };\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 540,
        "wires": [
            [
                "09d6ef80"
            ]
        ]
    },
    {
        "id": "09d6ef80",
        "type": "http response",
        "z": "793f10c4",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 560,
        "y": 540,
        "wires": []
    },
    {
        "id": "aa32cf82",
        "type": "http in",
        "z": "793f10c4",
        "name": "post /api/admin/items/:id/archive",
        "url": "/api/admin/items/:id/archive",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 120,
        "y": 600,
        "wires": [
            [
                "b09ee805"
            ]
        ]
    },
    {
        "id": "b09ee805",
        "type": "function",
        "z": "793f10c4",
        "name": "Auth Bearer",
        "func": "const auth = msg.req.headers.authorization || '';\nconst token = auth.startsWith('Bearer ') ? auth.slice(7) : '';\nconst ADMIN_TOKEN = process.env.REUSE_ADMIN_TOKEN || 'changeme';\nif (token !== ADMIN_TOKEN) {\n  msg.statusCode = 401;\n  msg.payload = { error: 'UNAUTHORIZED' };\n  return [null, msg];\n}\nreturn [msg, null];",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 600,
        "wires": [
            [
                "89c42b97"
            ],
            [
                "2e6bbfed"
            ]
        ]
    },
    {
        "id": "89c42b97",
        "type": "function",
        "z": "793f10c4",
        "name": "Archive item",
        "func": "const fs = require('fs');\nconst url = msg.req.params;\nconst id = url.id;\nconst path = 'data/reuse_items.json';\ntry {\n  const arr = JSON.parse(fs.readFileSync(path,'utf-8'));\n  const idx = arr.findIndex(t => t.id === id);\n  if (idx === -1) {\n    msg.statusCode = 404;\n    msg.payload = { error: 'NOT_FOUND' };\n    return msg;\n  }\n  arr[idx].archived = true;\n  fs.writeFileSync(path, JSON.stringify(arr, null, 2));\n  fs.appendFileSync('data/reuse_audit.jsonl', JSON.stringify({at: new Date().toISOString(), route:'POST /api/admin/items/'+id+'/archive'}) + '\\n');\n  msg.statusCode = 200;\n  msg.payload = arr[idx];\n} catch (e) {\n  msg.statusCode = 500;\n  msg.payload = { error: 'ITEMS_WRITE_ERROR' };\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 600,
        "wires": [
            [
                "2e6bbfed"
            ]
        ]
    },
    {
        "id": "2e6bbfed",
        "type": "http response",
        "z": "793f10c4",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 760,
        "y": 600,
        "wires": []
    }
]